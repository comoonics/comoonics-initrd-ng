#
# $Id: boot-lib.sh,v 1.67 2008/12/01 11:23:25 marc Exp $
#
# @(#)$File$
#
# Copyright (c) 2001 ATIX GmbH, 2007 ATIX AG.
# Einsteinstrasse 10, 85716 Unterschleissheim, Germany
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
export PS1="comoonics \! > " TERM=xterm

source ${predir}/etc/std-lib.sh
source ${predir}/etc/stdfs-lib.sh
source ${predir}/etc/hardware-lib.sh

# Load USB Modules so that USB keyboards work in Expertshell
usbLoad

sourceLibs ${predir}
if repository_has_key rootfs; then
  sourceRootfsLibs ${predir}
fi

logo=$(repository_get_value logo)
shellissue=$(repository_get_value shellissue)
shellissuetmp=$(repository_get_value shellissuetmp)

function setparameter {
   repository_store_value $*
}
function getparameter {
   repository_get_value $*
}
function delparameter {
	repository_del_value $*
}
function listparameters {
   repository_list_items "="
}
function drawline {
	echo "-------------------------------------------------------------"
	echo
}
function help {
    local logo=$(repository_get_value logo)
    logo $logo
	local shellissue=$(repository_get_value shellissue)
    if [ -n "$shellissue" ] && [ -f "$shellissue" ]; then	
	  cat $shellissue
    fi
}
function lastmessage {
	local shellissuetmp=$(repository_get_value shellissuetmp)
    if [ -n "$shellissuetmp" ] && [ -f "$shellissuetmp" ]; then	
	  cat $shellissuetmp
    fi
}
function messages {
	if [ -n "$bootlog" ] && [ -f "$bootlog" ]; then
	  cat $bootlog
	fi
}

function errors {
	repository_get_value exec_local_errors
}

function lastcommand {
	$(repository_get_value exec_local_lastcmd)
}
function lasterror {
	echo "Command: "$(repository_get_value exec_local_lastcmd)
	echo "Output: "$(repository_get_value exec_local_lastout)
	echo "Error: "$(repository_get_value exec_local_lasterror)
}
	
function logo() {
  local logo=$1
  if [ -f "$logo" ]; then
    cat $logo
    drawline
  fi
}
#if [ -f "$shellissue" ]; then
#  cat $shellissue
#  drawline
#fi
if [ -f "$shellissuetmp" ]; then
  cat $shellissuetmp
  drawline
fi

unset logo
unset shellissue
unset shellissuetmp

alias logger="logger -p daemon.notice"

typeset -f plymouth_hide >/dev/null 2>&1 && plymouth_hide >/dev/null 2>&1