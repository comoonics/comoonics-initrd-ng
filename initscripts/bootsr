#!/bin/bash
#****h* comoonics-bootimage/bootsr
#  NAME
#    bootsr
#    $Id: bootsr,v 1.30 2011/02/16 14:32:23 marc Exp $
#  DESCRIPTION
#    Comoonics Shared Root post boot settings
#  AUTHOR
#    Mark Hlawatschek
#
#*******
#
# chkconfig: 345 11 90
# description: do the post settings for Comoonics Shared Root
# Author: hlawatschek@atix.de
#
#

#
# /etc/rc.d/init.d/bootsr
#

BOOTIMAGE_PATH=/opt/atix/comoonics-bootimage
CHROOT_PATH=$(${BOOTIMAGE_PATH}/manage_chroot.sh -p) 
UPDATE_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a update"
UMOUNT_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a umount"
MOUNT_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a mount"
MOUNT_CDSL="${BOOTIMAGE_PATH}/manage_chroot.sh -a mount_cdsl"
CLEAN_START="${BOOTIMAGE_PATH}/manage_chroot.sh -a clean"
PATCH_FILES="${BOOTIMAGE_PATH}/manage_chroot.sh -a patch_files"
UNPATCH_FILES="${BOOTIMAGE_PATH}/manage_chroot.sh -a unpatch_files"
CREATE_XFILES="${BOOTIMAGE_PATH}/manage_chroot.sh -a createxfiles"
UPDATE_REPOSITORY="${BOOTIMAGE_PATH}/manage_chroot.sh -a update_repository"
BUILD_FILE="/etc/comoonics-build.txt"

RETVAL=0

if [ -f /etc/sysconfig/comoonics-chroot ]; then
	source /etc/sysconfig/comoonics-chroot
fi

. ${BOOTIMAGE_PATH}/boot-scripts/etc/std-lib.sh
sourceLibs ${BOOTIMAGE_PATH}/boot-scripts
sourceRootfsLibs ${BOOTIMAGE_PATH}/boot-scripts

[ -f /etc/init.d/functions ] && . /etc/init.d/functions
[ -f /etc/rc.status ] && . /etc/rc.status

#****f* bootsr/check_sharedroot
#  NAME
#    check_sharedroot
#  SYNOPSIS
#    function check_sharedroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function check_sharedroot {
  local root_fstype=$1
  if [ "${root_fstype:0:3}" = "gfs" ] || [ "$root_fstype" = "ocfs2" ] || [ "$root_fstype" = "nfs" ] || [ "$root_fstype" = "glusterfs" ]; then
    return 0
  else
    return 1
  fi
}
#************ check_sharedroot
#****f* bootsr/get_runlevel
#  NAME
#    get_runlevel
#  SYNOPSIS
#    function get_runlevel
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#************ umount_chroot
#****f* bootsr/umount_chroot
#  NAME
#    umount_chroot
#  SYNOPSIS
#    function umount_chroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function umount_chroot {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

rootfs=$(repository_get_value rootfs)
root=$(repository_get_value root)
clutype=$(repository_get_value clutype)
# overwrite with bootparameter if need be
chrootneeded=$(getParameter chrootneeded 2>/dev/null)
[ "$(repository_get_value chrootneeded)" = "__set__" ] && repository_store_value chrootneeded 0 
lvm_check $root
lvm_sup=$?

# See how we were called.
case "$1" in
  start)
    action "updateing bootsr.." $UPDATE_REPOSITORY
  	# will do
  	# - update chroot environment for additional services (fence_ack_server)

    # if /etc/mtab is not a link to /proc/mounts we need to update the mtab for the cdsl environment if it is mounted
	# check for the existence of the cdsl environment on /
	which com-cdslinvadm &> /dev/null && com-cdslinvadm --get config_version &> /dev/null
	# now check if /etc/mtab is a symlink to /proc/mounts and if not remount cdsl environment
    if ! ( [ $? -eq 0 ] && [ -L /etc/mtab ] && [ "$(ls -l /etc/mtab | sed -e 's/^.*-> //')" = "/proc/mounts" ]) && which com-cdslinvadm &>/dev/null; then
    	link=$(com-cdslinvadm --get link)
    	tree=$(com-cdslinvadm --get tree)
    	if [ -n "$link" ] && [ -n "$tree" ] && [ "$link" != "nocdsl" ] && [ "$tree" != "nocdsl" ]; then
    	    if [ ! -L /etc/mtab ] && ! MOUNTS=$(cat /etc/mtab) is_mounted "/"$(com-cdslinvadm --get link) && is_mounted "/"$(com-cdslinvadm --get link); then
    	       mount -f "/"$(com-cdslinvadm --get tree)"/"$(repository_get_value nodeid) "/"$(com-cdslinvadm --get link)
    	    fi
    	    action "Remounting cdsl environment." mount -o remount,rw "/"$(com-cdslinvadm --get link)
    	fi
    fi
    if  [ -n "$rootfs" ] && check_sharedroot $rootfs || ([ -n "$chrootneeded" ] && ( [ "$chrootneeded" = "0" ] || [ "$chrootneeded" = "__set__" ])); then
      touch /var/lock/subsys/bootsr
      if [ -z "$chrootneeded" ]; then
        clusterfs_chroot_needed init
        __default=$?
        chrootneeded=$(getParameter chroot $__default)
      fi
	  if [ "$chrootneeded" = "0" ] || [ "$chrootneeded" = "__set__" ]; then
 	  	action "Mounting filesystems to chroot" $MOUNT_CHROOT
	  	action "Updating chroot environment" $UPDATE_CHROOT
  	  fi 
 	  
      typeset -f cc_init >/dev/null && action "Starting ${clutype} dependent services" cc_init start "$rootfs" "$CHROOT_PATH"
   	  typeset -f clusterfs_init >/dev/null && action "Starting ${rootfs} dependent services" clusterfs_init start "$rootfs" "$CHROOT_PATH" "$lvm_sup" "$chrootneeded"
    fi
    ;;
  stop)
      typeset -f cc_init >/dev/null && action "Stopping ${clutype} dependent services" cc_init stop "$rootfs" "$CHROOT_PATH" "$CHROOT_PATH"
      typeset -f clusterfs_init >/dev/null && action "Stopping ${rootfs} dependent services" clusterfs_init stop "$rootfs" "$CHROOT_PATH" "$lvm_sup" "$chrootneeded"
  	  [ -e /var/lock/subsys/bootsr ] && rm -f /var/lock/subsys/bootsr 
  	  # if this filesystem requires the chroot by itself let it live for reboot to being able to proceed otherwise umount
	  typeset -f ${rootfs}_chroot_needed >/dev/null && ${rootfs}_chroot_needed init
	  if [ $? -ne 0 ] && is_mounted $CHROOT_PATH; then
	    action "Cleaning up chroot environment" $UMOUNT_CHROOT
	    action "Umount $CHROOT_PATH.." umount $CHROOT_PATH
	  fi
  	  $PATCH_FILES
  	  $CREATE_XFILES
        ;;
  status)
      exit 0
      ;;
  reload)
      if  [ -n "$rootfs" ] && (check_sharedroot $rootfs || [ "${chrootneeded}" = "0" ]); then
  	    
	    if clusterfs_chroot_needed init || [ "$chrootneeded" -eq 0 ] ; then
	      action "Updating chroot environment" $UPDATE_CHROOT
	    fi
	  fi
	  ;;
  restart)
  	 $0 stop
  	 $0 start 
      ;;
  patch_files)
      $PATCH_FILES
      ;;
  unpatch_files)
      $UNPATCH_FILES
      ;;
  *)
        echo "Usage: bootsr {start|stop|status|restart|reload}"
        RETVAL=1
esac
exit $RETVAL
#************ main
